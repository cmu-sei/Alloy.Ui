/*
Crucible
Copyright 2020 Carnegie Mellon University.
NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING, BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
Released under a MIT (SEI)-style license, please see license.txt or contact permission@sei.cmu.edu for full terms.
[DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution.  Please see Copyright notice for non-US Government use and distribution.
Carnegie Mellon(R) and CERT(R) are registered in the U.S. Patent and Trademark Office by Carnegie Mellon University.
DM20-0181
*/
/**
 * Alloy API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ApiError } from '../model/apiError';
import { EventTemplate } from '../model/event-template';


import { Configuration }                                     from '../configuration';


export interface EventTemplateServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    

    /**
    * Creates a new EventTemplate
    * Creates a new EventTemplate with the attributes specified  &lt;para /&gt;  Accessible only to a SuperUser or an Administrator
    * @param eventTemplate The data to create the EventTemplate with
    */
    createEventTemplate(eventTemplate?: EventTemplate, extraHttpRequestParams?: any): Observable<EventTemplate>;

    /**
    * Deletes an EventTemplate
    * Deletes an EventTemplate with the specified id  &lt;para /&gt;  Accessible only to a SuperUser or a User on an Admin Team within the specified EventTemplate
    * @param id The id of the EventTemplate to delete
    */
    deleteEventTemplate(id: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Gets a specific EventTemplate by id
    * Returns the EventTemplate with the id specified  &lt;para /&gt;  Accessible to a SuperUser or a User that is a member of a Team within the specified EventTemplate
    * @param id The id of the EventTemplate
    */
    getEventTemplate(id: string, extraHttpRequestParams?: any): Observable<EventTemplate>;

    /**
    * Gets all EventTemplate in the system
    * Returns a list of all of the EventTemplates in the system.  &lt;para /&gt;  Only accessible to a SuperUser
    */
    getEventTemplates(extraHttpRequestParams?: any): Observable<Array<EventTemplate>>;

    /**
    * Updates an EventTemplate
    * Updates an EventTemplate with the attributes specified  &lt;para /&gt;  Accessible only to a SuperUser or a User on an Admin Team within the specified EventTemplate
    * @param id The Id of the Exericse to update
    * @param eventTemplate The updated EventTemplate values
    */
    updateEventTemplate(id: string, eventTemplate?: EventTemplate, extraHttpRequestParams?: any): Observable<EventTemplate>;

}
